name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_DB: ye-pizza-test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd back-end && npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check TypeScript types
      run: |
        npm run build --dry-run || true
        cd back-end && npm run build --dry-run || true

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd back-end && npm ci

    - name: Run unit tests
      run: npm run test:unit -- --coverage

    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/unit/lcov.info
        flags: unit
        name: unit-tests

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd back-end && npm ci

    - name: Setup test database
      run: |
        cd back-end
        npm run create-schema
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    - name: Run integration tests
      run: npm run test:integration -- --coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        STRIPE_SECRET_KEY: sk_test_mock_key

    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/integration/lcov.info
        flags: integration
        name: integration-tests

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd back-end && npm ci

    - name: Build frontend
      run: npm run build

    - name: Build backend
      run: cd back-end && npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          dist/
          back-end/dist/

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://your-domain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files

    - name: Deploy to production
      run: |
        echo "Here would be deployment steps"
        echo "- Upload to server"
        echo "- Update Docker containers"
        echo "- Run database migrations"
        echo "- Health check"
